# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Language(models.Model):
    language_id = models.AutoField()
    language_name = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'language'

class Timezone(models.Model):
    timezone_id = models.AutoField()
    timezone_name = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'timezone'

class Skill(models.Model):
    skill_id = models.AutoField()
    skill_name = models.CharField(max_length=64)
    skill_description = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'skill'


class Manager(models.Model):
    manager_id = models.AutoField()
    manager_lname = models.CharField(max_length=64, blank=True, null=True)
    manager_fname = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'manager'



class Resource(models.Model):
    resource_id = models.AutoField()
    resource_lname = models.CharField(max_length=64)
    resource_fname = models.CharField(max_length=64)
    timezone_id = models.ForeignKey(Timezone)
    language_id = models.ForeignKey(Language)

    class Meta:
        managed = False
        db_table = 'resource'


class ResourceSkill(models.Model):
    resource_id = models.ForeignKey(Resource)
    skill_id = models.ForeignKey(Skill)
    resource_skill_level = models.ForeignKey(Skill)

    class Meta:
        managed = False
        unique_together = (("resource_id", "skill_id "),)
        db_table = 'resource_skill'



class Project(models.Model):
    project_id = models.AutoField()
    manager_id = models.ForeignKey(Manager)
    project_description = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project'


class ProjectTeam(models.Model):
    project_id = models.ForeignKey(Project)
    resource_id = models.ForeignKey(Resource)

    class Meta:
        managed = False
        unique_together = (("resource_id", "project_id "),)
        db_table = 'project_team'












